|
+-> [Application-Name folder "myApp"]
|	|
|	+-> admin.py
|	|
|	+-> apps.py
|	|
|	+-> models.py
|	|
|	+-> views.py
|	|
|	+-> __init__.py 
|	|	
|	+-> forms.py
|
+-> templates
|	|
|	+-> index.html
|	|
|	+-> *.html		
|
+-> [Project-Name folder]
|	|
|	+-> settings.py		# consist all configuration settings
|	|
|	+-> urls.py		# consist url pipelining 
|	|
|	+-> wsgi.py
|	|
|	+-> asgi.py
|	|
|	+-> __init__.py		# blank file
|
+-> static
|	|
|	+-> css
|	|	
|	|
|	+-> images 
|
+-> manage.py
==================================================================================================
                                                                             settings.py

"""
Django settings for first_project project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
"""


from pathlib import Path
import os                                      	       # <- import os module 
BASE_DIR = Path(__file__).resolve().parent.parent
TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')     #<-  add templates configuration 
STATIC_DIR=os.path.join(BASE_DIR, 'static')            #<- add css/img configuration
-
-
-
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myApp'					# add myApp in installed apps
]
-
-
-
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],			# add template diretory in templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
STATICFILES_DIRS=[STATIC_DIR]			# add static file directory
-
-

====================================================================================================================================
                                                                urls.py
"""first_project URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""							


from django.contrib import admin			# for admin.py
from django.urls import path				# for adding path

from myApp.views import EmpolyeeView			# import from views

from myApp.forms import StudentForm			# import from forms

from myApp1 import views as v1
from myApp2 import views as v2				# muliple application imports

from django.urls import path,include			# import from nested urls.(application have its own urls.py)

urlpatterns = [
    path('admin/', admin.site.urls,name=''),		# admin page

    path('response1/', EmpolyeeView,name=''),		# views.py pages
    
    path('response2/', StudentForm,name=''),		# forms.py pages

    path('response3/', v1.view1,name=''),		# multiapplication pages
    path('response4/', v2.view1,name='')
    path('response5/',include('myApp.urls'))		# nested urls pages 

]

# urls.py
from django.urls import path, re_path

from . import views


urlpatterns = [
    path("signup/", views.signup, name="account_signup"),
    path("login/", views.login, name="account_login"),
   re_path(r"^confirm-email/(?P<key>[-:\w]+)/$", views.confirm_email,
 re_path(r"^password/reset/key/(?P<uidb36>[0-9A-Za-z]+)-(?P<key>.+)/$",


==============================================================================================================
                                                      models.py

from django.db import models				# to create database model 
from django import forms				# to create forms 

# Create your models here.
Ex1:-

class Student(models.Model):				# Student table
    number = models.IntegerField()			# Model is a class(mj: we can assume it like a database table )
    name = models.CharField(max_length=40)
    marks = models.FloatField()
    def __str__(self):
        return self.name

                                                      admin.py
from django.contrib import admin
from myApp.models import Student
# Register your models here.
class StudentAdmin(admin.ModelAdmin):
    l=['number','name', 'marks']

admin.site.register(Student,StudentAdmin)
------------------------------------------------------------------------------------------
                                                     models.py
Ex2:-
class Employee(models.Model):				# Employee table
    eid = models.IntegerField()
    ename = models.CharField(max_length=30)
    edesig = models.CharField(max_length=30)
    edob = models.DateField()
    eexp = models.FloatField()
    esal = models.IntegerField()
    def __str__(self):
        return str(self.eid)
                                                     admin.py
from django.contrib import admin
from myApp.models import Employee
# Register your models here.
class EmployeeAdmin(admin.ModelAdmin):
    l=['eid','ename','edesig','edob','eexp','esal']
admin.site.register(Employee,EmployeeAdmin)
-------------------------------------------------------------------------------------------


+-----------------------------------------------------------------------------------------+
| 	                                  models.py                                       |
|	Ex3:-                                                                             |
|	class Student(models.Model):				# Student table           |
|   		sid=models.IntegerField()                                                 |
|    		sname=models.CharField(max_length=30)                                     |
|    		smarks=models.FloatField()                                                |
|    		splace=models.CharField(max_length=30)                                    |
|                                                                                         |
|                                        forms.py                                         |
|	class StudentForm(forms.Form):				# Student Forms           |
|		sid=forms.IntegerField()                                                  |
|    		sname=forms.CharField()                                                   |
|    		smarks=forms.FloatField()                                                 |
|    		splace=forms.CharField()                                                  |
|                                                                                         |
+-----------------------------------------------------------------------------------------+
==============================================================================================
Note:~ models.py and admin.py are connected 
==============================================================================================























































